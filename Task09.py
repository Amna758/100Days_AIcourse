# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r2ykQIaS7f5ZFIH_aIsMGFMJcLJgnICW
"""

# SMS.py

class Student:
    def __init__(self, name, age, student_id, courses=None):
        self._name = name
        self._age = age
        self._student_id = student_id
        self._courses = courses if courses else []

    # Getter methods
    def get_name(self):
        return self._name

    def get_age(self):
        return self._age

    def get_student_id(self):
        return self._student_id

    def get_courses(self):
        return self._courses

    # Setter methods
    def set_name(self, name):
        self._name = name

    def set_age(self, age):
        self._age = age

    def set_student_id(self, student_id):
        self._student_id = student_id

    def set_courses(self, courses):
        self._courses = courses

    # Class method to calculate GPA
    def calculate_gpa(self, grades):
        if not grades:
            return 0.0
        return round(sum(grades) / len(grades), 2)

    def __str__(self):
        return f"Student(Name: {self._name}, Age: {self._age}, ID: {self._student_id}, Courses: {self._courses})"


# Subclass for Graduate Student
class GraduateStudent(Student):
    def __init__(self, name, age, student_id, courses=None, thesis_title=""):
        super().__init__(name, age, student_id, courses)
        self._thesis_title = thesis_title

    def get_thesis_title(self):
        return self._thesis_title

    def set_thesis_title(self, title):
        self._thesis_title = title

    def __str__(self):
        return (f"GraduateStudent(Name: {self._name}, Age: {self._age}, ID: {self._student_id}, "
                f"Courses: {self._courses}, Thesis: {self._thesis_title})")


# Example usage
if __name__ == "__main__":
    student = Student("Alice", 20, "S123", ["Math", "Science"])
    print(student)
    student.set_age(21)
    print("Updated Age:", student.get_age())

    grad_student = GraduateStudent("Bob", 24, "G456", ["Research Methods"], "AI in Education")
    print(grad_student)

# file_handling.py

def read_students(filename):
    try:
        with open(filename, 'r') as file:
            lines = file.readlines()
            print("Student Records:")
            for line in lines:
                print(line.strip())
            print(f"Total Students: {len(lines)}")
    except FileNotFoundError:
        print(f"Error: File {filename} not found.")
    except Exception as e:
        print(f"An error occurred while reading the file: {e}")


def write_students(filename, student_data):
    try:
        with open(filename, 'w') as file:
            for student in student_data:
                file.write(student + '\n')
        print(f"Data written successfully to {filename}")
    except Exception as e:
        print(f"An error occurred while writing to the file: {e}")


# Example usage
if __name__ == "__main__":
    students = [
        "Alice,20,S123,Math;Science",
        "Bob,24,G456,Research Methods"
    ]
    write_students('student_output.txt', students)
    read_students('student_output.txt')

# arithmetic.py content
def calculate_percentage(obtained, total):
    return (obtained / total) * 100

def classify_grade(percentage):
    if percentage >= 90:
        return "A+"
    elif percentage >= 80:
        return "A"
    elif percentage >= 70:
        return "B"
    elif percentage >= 60:
        return "C"
    else:
        return "Fail"

# attendance.py content
def calculate_attendance(total_classes, attended_classes):
    return (attended_classes / total_classes) * 100

# performance.py content
def evaluate_performance(percentage):
    if percentage >= 90:
        return "Excellent"
    elif percentage >= 75:
        return "Good"
    elif percentage >= 60:
        return "Average"
    else:
        return "Needs Improvement"

# main.py content
if __name__ == "__main__":
    percentage = calculate_percentage(450, 500)
    grade = classify_grade(percentage)
    print(f"Percentage: {percentage}%, Grade: {grade}")

    attendance = calculate_attendance(100, 90)
    print(f"Attendance: {attendance}%")

    performance = evaluate_performance(percentage)
    print(f"Performance: {performance}")

# iterators_generators.py

import random

# Iterator class
class StudentList:
    def __init__(self, students):
        self._students = students
        self._index = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self._index < len(self._students):
            result = self._students[self._index]
            self._index += 1
            return result
        else:
            raise StopIteration


# Generator to simulate attendance
def attendance_generator(student_names):
    for name in student_names:
        status = random.choice(["Present", "Absent"])
        yield f"{name}: {status}"


# Generator to yield random marks
def random_marks_generator(num_students):
    for _ in range(num_students):
        yield random.randint(50, 100)


# Example usage
if __name__ == "__main__":
    students = ["Alice", "Bob", "Charlie"]

    print("\nIterating students:")
    student_iter = StudentList(students)
    for student in student_iter:
        print(student)

    print("\nAttendance:")
    for record in attendance_generator(students):
        print(record)

    print("\nRandom Marks:")
    for mark in random_marks_generator(3):
        print(mark)